
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'GameObject.sol';

// This is class that describes you smart contract.
contract Base is GameObject{
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint[] warAddress;
    uint private life = 5;
    mapping (uint => GameObject) army;
    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }

    function addWarrior(address warrior_address, GameObject warrior) public returns (address)
    {
        tvm.accept();
        (int8 wid, uint addr) = warrior_address.unpack();
        army[addr] = warrior;
        warAddress.push(addr);
        return address(tvm.pubkey());
    }

    function deleteWarrior(uint warrior_id) public
    {
        delete army[warAddress[warrior_id]];
        for(uint i = warrior_id; i+1 < warAddress.length; ++i)
        {
            warAddress[i] = warAddress[i+1];
        }

        warAddress.pop();
    }

    function destroy() public override
    {
        for(uint i = 0; i < warAddress.length; i++)
        {
            army[warAddress[i]].destroy();
        }
        
        super.destroy();
    }

    function getDefence() external virtual override returns (uint)
    {
        return 3;
    }

}
