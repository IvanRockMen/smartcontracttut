
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "IGameObject.sol";

// This is class that describes you smart contract.
abstract contract GameObject is IGameObject
{
    
    uint private life = 5;

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }

    function getDefence() external virtual returns (uint);

    function applyDamage(uint damage) public override
    {
        
        if(damage < 0)
        {
            damage = 0;
        }

        tvm.accept();
        life -= damage;

        if(isDeath())
        {
            destroy();
        }
    }

    function isDeath() private view returns (bool)
    {
        return life <= 0;
    }

    function destroy() public virtual
    {
        tvm.accept();
        msg.sender.transfer(0, true, 128+32);
    }

    

}
