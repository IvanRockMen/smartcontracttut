
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract nft {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    struct Token
    {
        string token_name;
        string image;
        string description;
        bool isSelling;
        uint price;
    }

    Token[] public tokens;

    mapping(uint => uint) tokensToOwners;
    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }

    modifier checkOwnerAndAccept
    {
        require(msg.pubkey() == tvm.pubkey(), 102);
        _;
    }

    modifier checkName(string name)
    {
        for(uint i = 0; i < tokens.length; i++)
        {
            require(tokens[i].token_name != name, 102, "This name is exists");
        }
        _;
    }

    function addToken(string name, string description, string image) public checkOwnerAndAccept checkName(name)
    {
        tvm.accept();
        tokens.push(Token(name, image, description, false, 0));
        tokensToOwners[msg.pubkey()] = tokens.length-1;
    }

    function setTokenOnSell(uint tokenId, uint price) public checkOwnerAndAccept
    {
        tvm.accept();
        tokens[tokenId].isSelling = true;
        tokens[tokenId].price = price;
    }
}
