
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract task_list {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    struct Task {
        string name;
        uint32 adding_time;
        bool isComplited;    
    }

    int8[] public key_list;

    mapping(int8 => Task) TaskList;

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }

    modifier getOwnerAndAccept
    {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        _;
    }

    function addTask(int8 key, string task_name) public getOwnerAndAccept
    {
        Task task = Task(task_name, now, false);
        TaskList[key] = task;
        key_list.push(key);
    }

    function getTasksCount() public getOwnerAndAccept returns (uint)
    {
        return key_list.length;
    }
    
    function getAllTasks() public getOwnerAndAccept returns (Task[])
    {
        Task[] tasks;
        
        for(uint i = 0; i < key_list.length; i++)
        {
            tasks.push(TaskList[key_list[i]]);
        }
        return tasks;
    }

    function getTaskDescription(int8 key) public getOwnerAndAccept returns (Task)
    {
        return TaskList[key];
    }

    function deleteTask(int8 key) public getOwnerAndAccept
    {
        require(!TaskList.empty(), 101, "Task list is empty");
        uint key_number;
        for(uint i = 0; i < key_list.length; i++)
        {
            if(key_list[i] == key)
            {
                key_number = i;
                break;
            }
        }

        if(key_list.length > 1)
        {
            for(uint i = key_number; i + 1 < key_list.length; ++i)
            {
                key_list[i] = key_list[i+1];
            }
        }
        else
        {
            key_list.pop();
        }
        

        require(TaskList.exists(key), 101);
        delete TaskList[key];
        
    }

    function completeTask(int8 key) public getOwnerAndAccept
    {
        TaskList[key].isComplited = true;
    }
        
}
